import Decimal,{D}from"../utils/break_eternity.js";import{format}from"../utils/format.js";import{getUpgradeEff,hasUpgrade,UPGRADES}from"./buyables.js";import{setupVue}from"../setup.js";import{createLazyProxy}from"../utils/utils.js";function createBaseMulti(t){return t}export function createUpgradeMulti({group:t,id:e,type:n,change:a}){const r=a??(t=>t);return createLazyProxy((()=>({["add"===n?"toAdd":"toMultiply"]:()=>r(getUpgradeEff(t,e)),enabled:()=>hasUpgrade(t,e),name:()=>UPGRADES[t].data[e].name})))}export function createAdditiveMulti({toAdd:t,enabled:e,name:n}){return createBaseMulti({apply:e=>Decimal.add(e,t()),enabled:e,description:()=>{let e=D(t());return(e.gt(0)?"+":"")+format(e)},name:n})}export function createMultiplicativeMulti({toMultiply:t,enabled:e,name:n}){return createBaseMulti({apply:e=>Decimal.mul(e,t()),enabled:e,description:()=>{let e=D(t());return e.abs().gt(1)?`ร${format(e)}`:`รท${format(e.recip())}`},name:n})}export function createChainedMulti(t,...e){return{value(...t){return e.filter((t=>!1!==t.enabled())).reduce(((e,n)=>n.apply(e,...t)),this.base(...t)??1)},enabled:()=>!e.every((t=>!1===t.enabled())),multi:e,base:t}}setupVue["gain-multi"]={props:["multi","props"],template:'\n  <span class="tooltip detailed">\n    <slot></slot>\n    <span class="tooltiptext">\n    <b>Modifiers:</b><br>\n    <table>\n      <tr>\n        <td>\n          Base:\n        </td>\n        <td>\n          {{format(multi.base())}}\n        </td>\n      </tr>\n      <template v-for="disp of multi.multi">\n        <tr v-if="disp.enabled()">\n          <td>\n            {{typeof disp.name === \'function\' ? disp.name() : disp.name}}:\n          </td>\n          <td>\n            {{disp.description()}}\n          </td>\n        </tr>\n      </template>\n      <tr>\n        <td>\n          Total:\n        </td>\n        <td>\n          {{format(multi.value())}}\n        </td>\n      </tr>\n    </table>\n    </span>\n  </span>\n ',setup:()=>({format:format})};
