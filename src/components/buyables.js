import{setupVue}from"../setup.js";import{DATA}from"../tmp.js";import{RESOURCES}from"./resources.js";import Decimal,{D}from"../utils/break_eternity.js";import{format,formatChange}from"../utils/format.js";export class Buyable{constructor({name:e,group:a,unl:t,max:n,cost:r,eff:u,defer:s,desc:i,diffDesc:o}){this.name=e,this.group=a,this.unl=t??(()=>!0),this.max=n??1/0,this.cost=r,this.eff=u,this.defer=s??D(0),this.desc=i,this.diffDesc=o??"to effect"}get levelDiff(){return this.eff(this.amt.add(1)).sub(this.eff(this.amt))}get groupData(){return(this.upg?UPGRADES:BUYABLES)[this.group]}get res(){return RESOURCES[this.groupData.res]}get player(){return this.groupData.player()}get amt(){return D(this.player[this.name.toLowerCase()]??0)}get maxed(){return this.amt.gte(this.max)}canBuy(){return this.res.amt.gte(this.cost(this.amt))&&!this.maxed}buy(){this.unl()&&this.canBuy()&&(this.res.sub(this.cost(this.amt)),this.player[this.name.toLowerCase()]=this.amt.add(1).min(this.max))}}export const BUYABLES={};export function getBuyable(e,a){return BUYABLES[e].data[a]}export function getBuyableEff(e,a){return DATA.setup?DATA.buyables[e][a].eff.value:getBuyable(e,a).defer}setupVue.buyable={props:["group","value"],template:'\n    <div class="buyable" v-if="key_data.unl()">\n      <div :role="key_data.name.toLowerCase()">\n        <b>({{format(key.amt.value, 0)}}x) {{key_data.name}}</b><br>\n        <gain-multi v-if="key_data.multipliers" :multi="key_data.multipliers">\n          <span v-html="text" />\n        </gain-multi>\n        <span v-else v-html="text" />\n      </div>\n      <div>\n        <button @click="key_data.buy()" \n        :class="{\n          canbuy: key_data.canBuy(), \n          cannotbuy: !key_data.canBuy()\n        }">\n          <b>{{key_group.buyPhrase ?? "Buy"}} +1</b><br>\n          {{\n            key_data.desc(key.eff.value).includes?.("%") ? \n            formatChange(key.levelDiff.value.add(1), 2) \n            : ((Decimal.gt(key.levelDiff.value, 0) ? "+" : "")\n             + format(key.levelDiff.value))\n          }} {{key_data.diffDesc}}<br>\n          {{format(key.cost.value)}} {{key_data.res.name}}\n        </button>\n      </div>\n    </div>\n  ',setup(e){const a=DATA.buyables[e.group][e.value],t=BUYABLES[e.group],n=t.data[e.value],r=n.desc(a.eff.value);return{key:a,key_group:t,key_data:n,format:format,formatChange:formatChange,Decimal:Decimal,text:r}}},setupVue.buyables={props:["group"],template:'\n    <div class="buyables" align=center>\n      <buyable v-for="(_,key) in BUYABLES[group].data" :group="group" :value="key" />\n    </div>\n  ',setup:()=>({BUYABLES:BUYABLES})};export class Upgrade extends Buyable{constructor(e){super(e),this.upg=!0,this.max=e.max??1}}export const UPGRADES={};export function getUpgrade(e,a){return UPGRADES[e]?.data[a]}export function getUpgradeEff(e,a){return DATA.setup?DATA.upgrades[e][a].eff.value:getUpgrade(e,a).defer}export function hasUpgrade(e,a){return DATA.upgrades[e][a].amt.value.gt(0)}setupVue.upgrade={props:["group","value"],template:'\n    <div class="buyable" v-if="key_data.unl()">\n      <div :role="key_data.name.toLowerCase()">\n        <b>\n          ({{format(key.amt.value, 0)}} / {{format(key_data.max, 0)}}) {{key_data.name}}\n        </b><br>\n        <span v-html="key_data.desc(key.eff.value)" />\n      </div>\n      <div>\n        <button @click="key_data.buy()" \n        :class="{\n          canbuy: key_data.canBuy(), \n          cannotbuy: !key_data.canBuy()\n        }">\n          <span v-if="!key_data.maxed">\n            <b>{{key_group.buyPhrase ?? "Buy"}} {{Decimal.eq(key_data.max, 1) ? "" : "+1"}}</b><br>\n            <span v-if="Decimal.gt(key_data.max, 1)">\n              {{\n                key_data.desc(key.eff.value).includes("%") \n                ? formatChange(key.levelDiff.value.add(1), 2) \n                : ((Decimal.gt(key.levelDiff.value, 0) ? "+" : "")\n                + format(key.levelDiff.value))\n              }} {{key_data.diffDesc}}<br>\n            </span>\n            {{format(key.cost.value)}} {{key_data.res.name}}\n          </span>\n          <span v-else>\n            <b>{{Decimal.eq(key_data.max, 1) ? "Bought" : "Maxed"}}</b>\n          </span>\n        </button>\n      </div>\n    </div>\n  ',setup(e){const a=DATA.upgrades[e.group][e.value],t=UPGRADES[e.group];return{key:a,key_group:t,key_data:t.data[e.value],format:format,formatChange:formatChange,Decimal:Decimal}}},setupVue.upgrades={props:["group"],template:'\n    <div class="buyables" align=center>\n      <upgrade v-for="(_,key) in UPGRADES[group].data" :group=group :value="key" />\n    </div>\n  ',setup:()=>({UPGRADES:UPGRADES})};
