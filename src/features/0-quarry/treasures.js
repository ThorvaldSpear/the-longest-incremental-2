import{RESOURCES}from"../../components/resources.js";import{hasUpgrade}from"../../components/buyables.js";import{player}from"../../player.js";import{D}from"../../utils/break_eternity.js";import{format}from"../../utils/format.js";import{notify}from"../../utils/notify.js";import{obtainInventory}from"./inventory.js";import{getOreWorthMul,LAYER_DATA}from"./quarry.js";const TREASURE_DATA={greenPapers:{range:[0,1/0],rarity:1,worth:(r,e)=>D(1e3).pow(D(r).div(50)).mul(LAYER_DATA[e].health).mul(getOreWorthMul()).div(3),obtain(r,e){const t=this.worth(r,e);RESOURCES.greenPaper.add(t),notify("You have obtained "+format(t)+" Green Papers!")}},map:{range:[25,1/0],rarity:5,obtain(r){hasUpgrade("GreenPapers",3)?(notify("You have obtained a new map at depth: "+format(r,0)+"!"),obtainInventory("map",{depth:r,freq:(1+Math.random()/8)**3,luck:(1+Math.random()/8)**2,health:(1+Math.random()/8)**2})):notify("You obtained something, but you dont have the required upgrade.")}}};function generateTreasure(r){let e=[],t=Math.random();for(let[o,a]of Object.entries(TREASURE_DATA))D(r).lt(a.range[0])||D(r).gt(a.range[1])||1/t<a.rarity||e.push(o);return e}export function getTreasure(r,e){for(let t of generateTreasure(r))TREASURE_DATA[t].obtain(r,e);player.stats.treasures++}
