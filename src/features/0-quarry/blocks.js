import{setupVue}from"../../setup.js";import{player}from"../../player.js";import{DATA}from"../../tmp.js";import Decimal,{D}from"../../utils/break_eternity.js";import{format}from"../../utils/format.js";import{getRarity}from"../../utils/utils.js";import{getUpgradeEff}from"../../components/buyables.js";import{createChainedMulti,createMultiplicativeMulti,createUpgradeMulti}from"../../components/gainMulti.js";import{RESOURCES}from"../../components/resources.js";import{ORE_DATA,LAYER_DATA,getQuarryDepth,getVoidDepth,getEffectiveDepth,isBlockExposed,inQuarryMap,getLayerRarity,getOreGain}from"./quarry.js";import{getMiner,getMinerEff}from"./miners.js";import{getTreasure}from"./treasures.js";import{reactive}from"https://unpkg.com/vue@3.2.37/dist/vue.esm-browser.js";function getBlockStrength(e){return e=getEffectiveDepth(e),D(1e3).pow(Decimal.div(e,50)).div(10).add(.9)}export function getBlockAmount(e){return DATA.resources[e.toLowerCase()].amt.value}export function generateBlock(e){e=D(e).round();let r="",t=0;for(const r of Object.values(LAYER_DATA))t+=getLayerRarity(e,r.range);let a=Math.random(),i=0;for(const[n,o]of Object.entries(LAYER_DATA))if(i+=getLayerRarity(e,o.range)/t,i>=a){r=n;break}let n=5;DATA.setup&&(n/=getUpgradeEff("GreenPapers",5).toNumber()),inQuarryMap()&&(n/=player.quarry.inMap.freq??1);let o="";for(const[r,t]of Object.entries(ORE_DATA)){if(e.lt(t.range[0])||e.gt(t.range[1]))continue;let a=t.rarity;inQuarryMap()&&(a/=player.quarry.inMap.luck??1),1/Math.random()>=n*Math.max(a,1)&&(o=r)}let l=!1;e.gt(25)&&""===o&&"Bedrock"!==r&&Math.random()<.05&&(l=!0);let p=!1;return e.gte(getVoidDepth())&&(p=!0,o="",l=!1),{layer:r,voided:p,ore:o,health:Decimal.dOne,treasure:l}}export function mineBlock(e,r,t){const a=getQuarryDepth().add(r),i=BLOCK_STATS[r][e].value(),n=player.quarry.map[r][e];n.health=D(n.health).sub(D(t).div(i)).min(1),n.health.lte(0)&&(n.health=D(0),player.stats.mined++,n.treasure&&getTreasure(a,n.layer)),n.ore&&RESOURCES[n.ore.toLowerCase()].add(t.mul(getOreGain(n.ore)))}function manualMine(e,r){player.miners.manualCooldown>0||isBlockExposed(e,r)&&(D(player.quarry.map[r][e].health).lte(0)||(mineBlock(e,r,getMinerEff(0)),player.miners.manualCooldown=D(1).div(getMiner(0).speedMultiplier.value()).toNumber()))}const BLOCK_STATS=Array(10).fill().map(((e,r)=>Array(10).fill().map(((e,t)=>createChainedMulti((()=>LAYER_DATA[player.quarry.map[r][t].layer].health),createMultiplicativeMulti({toMultiply:()=>getBlockStrength(getQuarryDepth().add(r)),enabled:()=>!0,name:"Depth Multiplier"}),createMultiplicativeMulti(createUpgradeMulti({group:"GreenPapers",id:6,type:"multiply",change:e=>Decimal.recip(e)})),createMultiplicativeMulti({toMultiply:()=>ORE_DATA[player.quarry.map[r][t].ore].health,enabled:()=>""!==player.quarry.map[r][t].ore,name:"Ore Multiplier"}),createMultiplicativeMulti({toMultiply:()=>player.quarry.inMap.health??1,enabled:()=>""!==player.quarry.map[r][t].ore&&inQuarryMap(),name:"Map Multiplier"})))))),blockHovered=reactive([void 0,void 0]);setupVue.Block={props:["width","height","x","y"],computed:{block(){return player.quarry.map?.[this.y]?.[this.x]},health(){return BLOCK_STATS?.[this.y]?.[this.x]?.value()},style(){const e=this.block.voided?"#000":LAYER_DATA[this.block.layer].color??"white",r=ORE_DATA[this.block.ore]?.color??"transparent",t=this.block.treasure?"#ffefbf":"#0001",a=D(this.block.health).pow(.5).max(0).min(1).toNumber(),i=isBlockExposed(this.x,this.y)?"transparent":"#0007";return a>0?{background:`\n            linear-gradient(#0003, #0003),\n            linear-gradient(#0003, #0003),\n            linear-gradient(${i}, ${i}),\n            linear-gradient(${r}, ${r}),\n            linear-gradient(${e}, ${e}),\n            linear-gradient(${t}, ${t}),\n            linear-gradient(${e}, ${e})\n          `,"background-position":"center, center, center, center, center, center, center","background-size":`${100*(1-a)}% 2px, 2px ${100*(1-a)}%, 100% 100%, 50% 50%, calc(100% - 2px) calc(100% - 2px), 100% 100%, 100% 100%`,"background-repeat":"no-repeat, no-repeat, no-repeat, no-repeat, no-repeat, no-repeat, no-repeat"}:{background:`\n            linear-gradient(#000a, #000a),\n            linear-gradient(${e}, ${e}),\n            linear-gradient(#0003, #0003),\n            linear-gradient(${e}, ${e})\n          `,"background-position":"center, center, center, center","background-size":"100% 100%, calc(100% - 2px) calc(100% - 2px), 100% 100%, 100% 100%","background-repeat":"no-repeat, no-repeat, no-repeat, no-repeat"}}},methods:{updateHover(e,r){blockHovered[0]=e,blockHovered[1]=r}},template:'\n    <div \n      v-if="block !== undefined"\n      @click="manualMine(x, y, block)"\n      @hover="updateHover(x, y)"\n      :style="style" \n      style="width: 32px; height: 32px; transition: background-size .5s">\n    </div>\n  ',setup:()=>({manualMine:manualMine})},setupVue["block-stats"]={computed:{y:()=>blockHovered[1],x:()=>blockHovered[0],block(){return player.quarry.map[this.y][this.x]},multi(){return BLOCK_STATS[this.y][this.x]},health(){return this.multi.value()}},template:'\n    <div v-if="blockHovered.every(i=>i!==undefined)">\n      <div>\n        Location: ({{x}}, {{y}})\n      </div>\n      <div v-if="Decimal.lte(block.health, 0)">\n        This block is already mined!\n      </div>\n      <div v-else-if="block.voided">\n        This is a Void Block... (Collapse to proceed!)\n      </div>\n      <div v-else-if="block.layer === \'Bedrock\'">\n        This block is impassable.\n      </div>\n      <div v-else>\n        <b>Block Type: {{block.layer}}</b>\n        <span v-if="block.ore !== \'\'">\n          <br>Ore: {{block.ore}} ({{getRarity(ORE_DATA[block.ore].rarity)}})\n        </span><br>\n        Health: {{format(health.mul(block.health))}} /\n        <gain-multi :multi="multi">\n          {{format(health)}}\n        </gain-multi><br>\n        <b v-if="block.treasure" style=\'color: gold\'>Treasure inside!</b>\n      </div>\n    </div>\n  ',setup:()=>({Decimal:Decimal,blockHovered:blockHovered,getRarity:getRarity,ORE_DATA:ORE_DATA,format:format})};
